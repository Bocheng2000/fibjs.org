
/*! @brief Concurrency control module

 The way to use: var coroutine = require('coroutine');
 */
module coroutine
{
    /*! @brief Lock Object, reference Lock */
    static Lock new Lock();

    /*! @brief Semaphore Object, reference Semaphore */
    static Semaphore new Semaphore();

    /*! @brief Condition Object, reference Condition */
    static Condition new Condition();

    /*! @brief Event Object, reference Event */
    static Event new Event();

    /*! @brief Event Trigger Object, which can be used to establish the observer pattern. The object support event triggers were inherited from this, reference Trigger */
    static Trigger new Trigger();

    /*! @brief BlockQueue Object, reference BlockQueue */
    static BlockQueue new BlockQueue();

    /*! @brief Start a fibers and return the fiber Object
     @param func Set a function to be executed by the fibers.
     @param ... Variable parameter sequence, the sequence will pass to function in fiber.
     @return Returns the fiber object.
     */
    static Fiber start(Function func, ...);

    /*! @brief Execute a set of functions parallel, and wait for the return.
     @param func An array of function to be executed parallel
     @return Returns the array of functions execute results
     */
    static Array parallel(Array func);

    /*! @brief Execute a function deal with a set of data parallel, and wait for the return.
     @param data An array of params to be executed by function parallel
     @param func The function of execute parallel
     @return Returns the array of function execute results
     */
    static Array parallel(Array data, Function func);

    /*! @brief Execute a set of functions parallel, and wait for the return.
     @param ... A set of function to be execute parallel
     @return Returns the array of functions execute results
     */
    static Array parallel(...);

    /*! @brief Returns the current fiber.
     @return Returns the current fiber object.
     */
    static Fiber current();

    /*! @brief Pause the current fiber specified time.
     @param ms Specify the suspend time in milliseconds, the default value is 0, which back to resume immediately.
     */
    static sleep(Integer ms = 0);

    /*! @brief Whether mandatory use single mode, the default value is False

     Single user mode, the unnecessary asynchronous operations are executed in js thread block, which can eliminate asynchronous messaging lead to additional load and improve the operation speed, but the operation will block other Fiber. Can be used for concurrent request for low compute-intensive applications.
     */
    static Boolean singleUserMode;
};
